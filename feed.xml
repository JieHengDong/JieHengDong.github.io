<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jiehengdong.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jiehengdong.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-11T08:40:24+00:00</updated><id>https://jiehengdong.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">卡通渲染的一些思路</title><link href="https://jiehengdong.github.io/blog/2024/Carton-Render-Essay/" rel="alternate" type="text/html" title="卡通渲染的一些思路"/><published>2024-05-05T20:14:00+00:00</published><updated>2024-05-05T20:14:00+00:00</updated><id>https://jiehengdong.github.io/blog/2024/Carton-Render-Essay</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/Carton-Render-Essay/"><![CDATA[<blockquote> <p>思路还在整理</p> </blockquote> <p><mark>风格化渲染还是使用UnLit不受光的</mark></p> <h2 id="卡通灯光">卡通灯光</h2> <p>暂时使用调整平行光强度为0.1，削弱平行光的影响，增强卡通风格天空盒强度来实现场景卡通打光</p> <h2 id="动态阴影贴图">动态阴影贴图</h2> <p>阴影分层管理 动态的物体如玩家 自己做动态阴影</p> <ul> <li>将照明通道与几何通道分离。</li> <li>动态阴影级联提高阴影质量</li> <li>场景中PBR灯光仅投射阴影 卡通(贴片灯光)灯光和仅阴影灯光单独灯光，区分开来分层</li> </ul> <p>使用许多静态阴影贴图相机不仅仅是出于艺术原因， 而且也是为了提高纹理流的效率。 当我们考虑使用静态阴影贴图时，我们首先考虑的问题之一是内存使用和流式传输故障。 我们通过监控纹理大小并专注于能够有效地在多个帧之间分配流式传输来管理静态阴影贴图纹理流式传输工作负载。因此，我们不能让单个静态阴影贴图纹理太大。 我们的静态阴影贴图放置在它们自己的流式传输级别中，在流式传输级别中，我们通过设置每帧流式传输内存限制来在多个帧之间分配纹理流式传输。</p> <h2 id="静态阴影贴图">静态阴影贴图</h2> <p>阴影分层管理 场景内静态物体 就烘焙静态阴影</p> <p>使用体积阴影的原因是正常烘焙的阴影纯黑显示效果不太好</p> <p>贴画灯光不受阴影</p> <h2 id="风格化阴影">风格化阴影</h2> <p>玩家阴影和我们的一些静态阴影贴图都是用阴影到光的过渡风格绘制的。阴影距离阴影投射物体越远，阴影线就越细，这代表了 2d 卡通风格阴影到光的过渡。</p> <h2 id="胶囊阴影">胶囊阴影</h2> <p>非玩家角色使用更具成本效益的胶囊阴影来绘制阴影。胶囊阴影是标准的 UE4 功能。艺术家准备近似于角色网格的胶囊形状，并使用这些形状计算朝向全局光方向的每像素可见性以近似软阴影。它不适用于照片级逼真的游戏，但我们可以摆脱胶囊阴影的斑点外观，因为我们是卡通人物。</p> <h2 id="角色">角色</h2> <p>脸部比其他部分需要更高的质量。 但是，使用顶点法线阴影实现所需质量存在问题。 第一个问题是使用顶点法线很难创建平滑的曲线。 如右图所示，根据光线的方向，阴影形状可能变得相当混乱。 这是因为几何图形的可分割数量是有限的，而阴影形状受分割方式的影响。</p> <p>第二个问题是，顶点法线产生的阴影形状很容易因面部运动而破坏。</p> <p>当骨骼方向因面部运动而改变时，顶点法线的方向也会改变，这会无意中破坏阴影形状。</p> <p>在这个面部表情极端的场景中，阴影形状会根据光线的方向而变得相当破碎。</p> <p>第三个问题是艺术家很难做出调整。 艺术家可以调整几何体和顶点法线，但他们很难通过手动调整完全避免问题 1 和 2。 很难直观地了解顶点法线和几何体调整在所有各种光照方向上的结果形状。 即使使用法线贴图代替顶点法线，问题 1 可能会得到解决，但问题 2 和 3 将无法解决。</p> <h2 id="ao-体积阴影">AO 体积阴影</h2> <h2 id="漫反射全局照明">漫反射全局照明</h2> <h2 id="ssao">SSAO</h2> <h2 id="ssr">SSR</h2> <h2 id="后处理概要">后处理概要</h2> <h2 id="后期处理卡通着色">后期处理卡通着色</h2> <h2 id="体积雾">体积雾</h2> <h2 id="相机运动模糊">相机运动模糊</h2> <h2 id="卡通运动模糊">卡通运动模糊</h2> <h2 id="色调图">色调图</h2> <h2 id="盛开">盛开</h2> <p>使用屏幕空间特效，实现调色高亮等功能</p> <p>非常适合没有深度的物体 体积雾</p> <p><mark>还是使用Gbuffer计算world space UV</mark></p> <h2 id="镜头光晕">镜头光晕</h2> <h2 id="抗锯齿">抗锯齿</h2> <p>smoothstep(Radius-Width, Radius+Width, Dist) The yellow frame area is 2*width.</p> <p>为了调整圆形边界锯齿</p> <h1 id="区域范围内的卡通渲染">区域范围内的卡通渲染</h1> <p><mark>好像是为了节省全局的渲染开销和美术更好操作的思路去做箱型范围渲染</mark></p> <p>分离基于相机视角的后处理，使用Cube类似的空间约束</p> <p>深度相关时的竖直墙面，就用GBuffer worldDepth 计算</p>]]></content><author><name></name></author><category term="Unity"/><category term="UnFinsh"/><summary type="html"><![CDATA[卡通渲染随笔]]></summary></entry><entry><title type="html">预制体生成UI脚本</title><link href="https://jiehengdong.github.io/blog/2024/CodeGenerator/" rel="alternate" type="text/html" title="预制体生成UI脚本"/><published>2024-04-11T20:14:00+00:00</published><updated>2024-04-11T20:14:00+00:00</updated><id>https://jiehengdong.github.io/blog/2024/CodeGenerator</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/CodeGenerator/"><![CDATA[<h2 id="前情提要">前情提要</h2> <p>为了减少重复劳动，根据控件注册UI的简单实现。</p> <p>依提供思路为主</p> <h2 id="自动化">自动化</h2> <p>在右键菜单注册</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">MenuItem</span><span class="p">(</span><span class="s">"Assets/UIView from Prefab"</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="m">1</span><span class="p">)]</span>
</code></pre></div></div> <p>识别选中物体</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取当前选中的对象</span>
        <span class="kt">var</span> <span class="n">prefab</span> <span class="p">=</span> <span class="n">Selection</span><span class="p">.</span><span class="n">activeGameObject</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prefab</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debug</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="s">"Please select a prefab."</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div> <p>使用.Net的库来写入代码，注意引用和缩进</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">StringBuilder</span> <span class="n">code</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"using UnityEngine;"</span><span class="p">);</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"using UnityEngine.UI;"</span><span class="p">);</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"using CrocodileFramework.UI;"</span><span class="p">);</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"using TMPro;"</span><span class="p">);</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"public class "</span> <span class="p">+</span> <span class="n">className</span> <span class="p">+</span> <span class="s">" : UIWindow"</span><span class="p">);</span>
        <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"{"</span><span class="p">);</span>
</code></pre></div></div> <p>递归识别控件</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AppendChildrenComponents</span><span class="p">(</span><span class="n">Transform</span> <span class="n">parent</span><span class="p">,</span> <span class="n">StringBuilder</span> <span class="n">code</span><span class="p">,</span> <span class="kt">string</span> <span class="n">parentPath</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">Transform</span> <span class="n">child</span> <span class="k">in</span> <span class="n">parent</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">path</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">parentPath</span><span class="p">)</span> <span class="p">?</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span> <span class="p">:</span> <span class="n">parentPath</span> <span class="p">+</span> <span class="s">"/"</span> <span class="p">+</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">fieldType</span> <span class="p">=</span> <span class="nf">GetFieldType</span><span class="p">(</span><span class="n">child</span><span class="p">.</span><span class="n">gameObject</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">fieldType</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"    private </span><span class="p">{</span><span class="n">fieldType</span><span class="p">}</span><span class="s"> </span><span class="p">{</span><span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)}</span><span class="s">;"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// 递归处理子对象</span>
            <span class="nf">AppendChildrenComponents</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div> <p>根据控件路径写入注册</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AssignChildrenComponents</span><span class="p">(</span><span class="n">Transform</span> <span class="n">parent</span><span class="p">,</span> <span class="n">StringBuilder</span> <span class="n">code</span><span class="p">,</span> <span class="kt">string</span> <span class="n">parentPath</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">Transform</span> <span class="n">child</span> <span class="k">in</span> <span class="n">parent</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">path</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">parentPath</span><span class="p">)</span> <span class="p">?</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span> <span class="p">:</span> <span class="n">parentPath</span> <span class="p">+</span> <span class="s">"/"</span> <span class="p">+</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">fieldType</span> <span class="p">=</span> <span class="nf">GetFieldType</span><span class="p">(</span><span class="n">child</span><span class="p">.</span><span class="n">gameObject</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">fieldType</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">code</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"        </span><span class="p">{</span><span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"_"</span><span class="p">)}</span><span class="s"> = FindChildComponent&lt;</span><span class="p">{</span><span class="n">fieldType</span><span class="p">}</span><span class="s">&gt;(\"</span><span class="p">{</span><span class="n">path</span><span class="p">}</span><span class="s">\");"</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// 递归处理子对象</span>
            <span class="nf">AssignChildrenComponents</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div> <p><mark>部分代码是框架内代码，请自行替换</mark></p> <h2 id="拓展功能">拓展功能</h2> <p>根据控件类型注册</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetFieldType</span><span class="p">(</span><span class="n">GameObject</span> <span class="n">obj</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"Button"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Text</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"Text"</span><span class="p">;</span>
        <span class="c1">// if (obj.GetComponent&lt;Image&gt;() != null) return "Image";</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Toggle</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"Toggle"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Slider</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"Slider"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Dropdown</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"Dropdown"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">InputField</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"InputField"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">TMP_Text</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"TMP_Text"</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">TMP_InputField</span><span class="p">&gt;()</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="s">"TMP_InputField"</span><span class="p">;</span>
        <span class="c1">// 添加更多组件类型检查</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div> <p>识别预制体</p> <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">MenuItem</span><span class="p">(</span><span class="s">"Assets/Generate Code from Prefab"</span><span class="p">,</span> <span class="k">true</span><span class="p">)]</span>
<span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">ValidateGenerateCodeFromPrefab</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 验证当前选中的对象是否是预制体</span>
        <span class="k">return</span> <span class="n">Selection</span><span class="p">.</span><span class="n">activeObject</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">PrefabUtility</span><span class="p">.</span><span class="nf">GetPrefabAssetType</span><span class="p">(</span><span class="n">Selection</span><span class="p">.</span><span class="n">activeObject</span><span class="p">)</span> <span class="p">!=</span> <span class="n">PrefabAssetType</span><span class="p">.</span><span class="n">NotAPrefab</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Unity"/><category term="Workflow"/><category term="Automation"/><summary type="html"><![CDATA[自动化相关]]></summary></entry><entry><title type="html">Dissolve Shader</title><link href="https://jiehengdong.github.io/blog/2024/Shader-Dissolve/" rel="alternate" type="text/html" title="Dissolve Shader"/><published>2024-04-02T15:53:53+00:00</published><updated>2024-04-02T15:53:53+00:00</updated><id>https://jiehengdong.github.io/blog/2024/Shader-Dissolve</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/Shader-Dissolve/"><![CDATA[<h2 id="溶解效果">溶解效果</h2> <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Universal Render Pipeline/Wireframe/DisplacementFade"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span> <span class="p">(</span><span class="s">"Main Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{</span> <span class="p">}</span>
        <span class="n">_WireThickness</span> <span class="p">(</span><span class="s">"Wire Thickness"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">800</span><span class="p">))</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="p">[</span><span class="n">HDR</span><span class="p">]</span> <span class="n">_WireColor</span> <span class="p">(</span><span class="s">"Wire Color"</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">INVERT</span><span class="p">)]</span> <span class="n">_INVERT</span><span class="p">(</span><span class="s">"Invert"</span><span class="p">,</span> <span class="n">Float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">_MovingSlider</span> <span class="p">(</span><span class="s">"Moving Slider"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">_Extrude</span><span class="p">(</span><span class="s">"Extrude Amount"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">_WireFrameStay</span> <span class="p">(</span><span class="s">"Wire Stay"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span>
 
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span><span class="s">"RenderType"</span> <span class="o">=</span> <span class="s">"Opaque"</span> <span class="s">"RenderPipeline"</span> <span class="o">=</span> <span class="s">"UniversalPipeline"</span> <span class="p">}</span>
        <span class="n">LOD</span> <span class="mi">100</span>
 
        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="c1">// Wireframe shader based on the the following</span>
            <span class="c1">// http://developer.download.nvidia.com/SDK/10/direct3d/Source/SolidWireframe/Doc/SolidWireframe.pdf</span>
 
            <span class="n">HLSLPROGRAM</span>
            <span class="cp">#pragma require geometry
</span> 
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma geometry geom
</span>            <span class="cp">#pragma fragment frag
</span>            <span class="cp">#pragma shader_feature INVERT
</span>            <span class="c1">// -------------------------------------</span>
            <span class="c1">// Unity defined keywords</span>
            <span class="cp">#pragma multi_compile_instancing
</span> 
            <span class="cp">#include</span> <span class="cpf">"Packages/com.unity.render-pipelines.universal/Shaders/UnlitInput.hlsl"</span><span class="cp">
</span>        <span class="c1">//    #include "UnlitInput.hlsl"</span>
 
            <span class="kt">float</span> <span class="n">_WireThickness</span><span class="p">;</span>
            <span class="n">float4</span> <span class="n">_WireColor</span><span class="p">;</span>
            <span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_MovingSlider</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_Extrude</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_WireFrameStay</span><span class="p">;</span>
 
            <span class="k">struct</span> <span class="n">Attributes</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">positionOS</span>       <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float3</span> <span class="n">normal</span> <span class="o">:</span><span class="n">NORMAL</span><span class="p">;</span>
            <span class="p">};</span>
 
            <span class="k">struct</span> <span class="n">v2g</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">projectionSpaceVertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span><span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">:</span> <span class="n">TEXCOORD1</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_OUTPUT_STEREO</span>
            <span class="p">};</span>
 
            <span class="n">v2g</span> <span class="n">vert</span><span class="p">(</span><span class="n">Attributes</span> <span class="kr">input</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2g</span> <span class="kr">output</span> <span class="o">=</span> <span class="p">(</span><span class="n">v2g</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
 
                <span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="kr">input</span><span class="p">);</span>
                <span class="n">UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO</span><span class="p">(</span><span class="kr">output</span><span class="p">);</span>
 
                <span class="c1">// move over the mesh y axis using a slider</span>
                <span class="c1">// with option to invert</span>
                <span class="cp">#if INVERT
</span>                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">=</span> <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">_MovingSlider</span><span class="p">;</span>
                <span class="cp">#else
</span>                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span> <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">_MovingSlider</span><span class="p">;</span>
                <span class="cp">#endif
</span>                <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">xyz</span> <span class="o">-=</span> <span class="n">saturate</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">movingPos</span><span class="p">)</span> <span class="o">*</span> <span class="kr">input</span><span class="p">.</span><span class="n">normal</span> <span class="o">*</span> <span class="n">_Extrude</span><span class="p">;</span>
                <span class="n">VertexPositionInputs</span> <span class="n">vertexInput</span> <span class="o">=</span> <span class="n">GetVertexPositionInputs</span><span class="p">(</span><span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">xyz</span><span class="p">);</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">vertexInput</span><span class="p">.</span><span class="n">positionCS</span><span class="p">;</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="kr">input</span><span class="p">.</span><span class="n">uv</span><span class="p">;</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">movingPos</span><span class="p">;</span>
                <span class="k">return</span> <span class="kr">output</span><span class="p">;</span>
            <span class="p">}</span>
 
            <span class="k">struct</span> <span class="n">g2f</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">projectionSpaceVertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">dist</span> <span class="o">:</span> <span class="n">TEXCOORD1</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">:</span> <span class="n">TEXCOORD2</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_OUTPUT_STEREO</span>
            <span class="p">};</span>
 
            <span class="p">[</span><span class="n">maxvertexcount</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
            <span class="kt">void</span> <span class="n">geom</span><span class="p">(</span><span class="n">triangle</span> <span class="n">v2g</span> <span class="n">i</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="k">inout</span> <span class="n">TriangleStream</span><span class="o">&lt;</span><span class="n">g2f</span><span class="o">&gt;</span> <span class="n">triangleStream</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
 
                <span class="n">float2</span> <span class="n">p0</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
 
                <span class="n">float2</span> <span class="n">edge0</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p1</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">edge1</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">edge2</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
 
                <span class="c1">// To find the distance to the opposite edge, we take the</span>
                <span class="c1">// formula for finding the area of a triangle Area = Base/2 * Height,</span>
                <span class="c1">// and solve for the Height = (Area * 2)/Base.</span>
                <span class="c1">// We can get the area of a triangle by taking its cross product</span>
                <span class="c1">// divided by 2.  However we can avoid dividing our area/base by 2</span>
                <span class="c1">// since our cross product will already be double our area.</span>
                <span class="kt">float</span> <span class="n">area</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">edge1</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">edge2</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">edge1</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">edge2</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
                <span class="kt">float</span> <span class="n">wireThickness</span> <span class="o">=</span> <span class="mi">800</span> <span class="o">-</span> <span class="n">_WireThickness</span><span class="p">;</span>
 
                <span class="n">g2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge0</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
 
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge1</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
 
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge2</span><span class="p">)))</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
            <span class="p">}</span>
 
            <span class="n">half4</span> <span class="n">frag</span><span class="p">(</span><span class="n">g2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="kt">float</span> <span class="n">minDistanceToEdge</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
                <span class="n">float4</span> <span class="n">mainTex</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">xy</span><span class="p">);</span>
 
                <span class="c1">// show texture where there is no wireframe</span>
                <span class="c1">// also fades the wireframe over the moving position</span>
                <span class="k">if</span><span class="p">(</span><span class="n">minDistanceToEdge</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">9</span><span class="o">*</span> <span class="mi">1</span><span class="o">-</span> <span class="n">saturate</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">-</span> <span class="n">_WireFrameStay</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="c1">// discard pixels where there is no wireframe earlier</span>
                    <span class="n">clip</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">);</span>
                    <span class="k">return</span> <span class="n">mainTex</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="c1">// discard pixels over the moving position</span>
                <span class="n">clip</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">_WireColor</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDHLSL</span>
        <span class="p">}</span>
    <span class="p">}</span>
 
    <span class="n">FallBack</span> <span class="s">"Hidden/Universal Render Pipeline/FallbackError"</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Shader"/><summary type="html"><![CDATA[溶解效果的记录]]></summary></entry><entry><title type="html">Unity导出原生AAR嵌入原生</title><link href="https://jiehengdong.github.io/blog/2024/Unity-Export-Android-AAR/" rel="alternate" type="text/html" title="Unity导出原生AAR嵌入原生"/><published>2024-04-01T10:14:00+00:00</published><updated>2024-04-01T10:14:00+00:00</updated><id>https://jiehengdong.github.io/blog/2024/Unity-Export-Android-AAR</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/Unity-Export-Android-AAR/"><![CDATA[<h2 id="unity原生接入">Unity原生接入</h2> <p>为了更好的适应跨平台的开发需求，需要Unity结合原生开发</p> <ul> <li>环境 Unity 2022.3.21f1f1</li> </ul> <h3 id="unity导出设置">Unity导出设置</h3> <p>切换当前平台到对应平台，这里用安卓平台举例</p> <p>切换当前平台到对应安卓平台，如果未安装安卓插件去 Unityhub/Installs/your Editor/Add moudles</p> <p>进入项目设置</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/Unity_Setting.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>具体目标平台根据项目需求选择，ScriptingBackend 选择IL2CPP</p> <p>使用Android studio 打开(软件安装等不赘述)</p> <h3 id="原生项目设置">原生项目设置</h3> <p>原生项目结构</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">launcher</span><span class="pi">:</span>
  <span class="na">manifest</span><span class="pi">:</span>
  <span class="na">res</span><span class="pi">:</span>
    <span class="na">mipmap</span><span class="pi">:</span>
    <span class="na">values</span><span class="pi">:</span>

<span class="na">unityLibrary</span><span class="pi">:</span>
  <span class="na">manifests</span><span class="pi">:</span>
  <span class="na">java</span><span class="pi">:</span>
</code></pre></div></div> <ul> <li>需要把launcher/res/minmap 拷贝到 unityLibrary/res 路径下</li> <li>需要把launcher/res/values/string.xml 拷贝到 unityLibrary/res 路径下</li> </ul> <p>注释掉入口代码</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;application</span> <span class="na">android:extractNativeLibs=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.splash-mode"</span> <span class="na">android:value=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.splash-enable"</span> <span class="na">android:value=</span><span class="s">"True"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.launch-fullscreen"</span> <span class="na">android:value=</span><span class="s">"True"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"notch.config"</span> <span class="na">android:value=</span><span class="s">"portrait|landscape"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.auto-report-fully-drawn"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">"com.unity3d.player.UnityPlayerActivity"</span> <span class="na">android:theme=</span><span class="s">"@style/UnityThemeSelector"</span> <span class="na">android:screenOrientation=</span><span class="s">"fullUser"</span> <span class="na">android:launchMode=</span><span class="s">"singleTask"</span> <span class="na">android:configChanges=</span><span class="s">"mcc|mnc|locale|touchscreen|keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize|fontScale|layoutDirection|density"</span> <span class="na">android:resizeableActivity=</span><span class="s">"false"</span> <span class="na">android:hardwareAccelerated=</span><span class="s">"false"</span><span class="nt">&gt;</span>
<span class="c">&lt;!--      &lt;intent-filter&gt;--&gt;</span>
<span class="c">&lt;!--        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;--&gt;</span>
<span class="c">&lt;!--        &lt;action android:name="android.intent.action.MAIN" /&gt;--&gt;</span>
<span class="c">&lt;!--      &lt;/intent-filter&gt;--&gt;</span>
      <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unityplayer.UnityActivity"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"notch_support"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/activity&gt;</span>
</code></pre></div></div> <h3 id="gradle-导出">Gradle 导出</h3> <p>根据自己项目设置使用Gradle导出AAR包，提供给原生接入</p>]]></content><author><name></name></author><category term="Unity"/><category term="Workflow"/><summary type="html"><![CDATA[与原生交互相关]]></summary></entry><entry><title type="html">三平面映射</title><link href="https://jiehengdong.github.io/blog/2023/Shader-Triplanar-Mapping/" rel="alternate" type="text/html" title="三平面映射"/><published>2023-07-18T19:42:23+00:00</published><updated>2023-07-18T19:42:23+00:00</updated><id>https://jiehengdong.github.io/blog/2023/Shader-Triplanar-Mapping</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2023/Shader-Triplanar-Mapping/"><![CDATA[<h2 id="前情提要">前情提要</h2> <p>根据点云数据生成的地形在套用材质时候，Y轴拉伸异常</p> <h2 id="理论">理论</h2> <p>一般材质只是根据二维平面采样，如Y轴的XZ平面，在地形高低差过大就会拉伸。</p> <p>所以我们需要从三个平面来投射UV</p> <ul> <li>XZ世界坐标的UV投影 Y</li> <li>ZY世界坐标的UV投影 X</li> <li>XY世界坐标的UV投影 Z <blockquote> <p>PS: 还能解决材质球无缝的问题</p> </blockquote> </li> </ul> <h2 id="代码">代码</h2> <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"CustomShader/Triplanar"</span> 
<span class="p">{</span>
	<span class="n">Properties</span> 
	<span class="p">{</span>
		<span class="n">_DiffuseMap</span> <span class="p">(</span><span class="s">"Diffuse Map "</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span>  <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
		<span class="n">_TextureScale</span> <span class="p">(</span><span class="s">"Texture Scale"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
		<span class="n">_TriplanarBlendSharpness</span> <span class="p">(</span><span class="s">"Blend Sharpness"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
	<span class="p">}</span>
	<span class="n">SubShader</span> 
	<span class="p">{</span>
		<span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Opaque"</span> <span class="p">}</span>
		<span class="n">LOD</span> <span class="mi">200</span>

		<span class="n">CGPROGRAM</span>
		<span class="cp">#pragma target 3.0
</span>		<span class="cp">#pragma surface surf Lambert
</span>
		<span class="kt">sampler2D</span> <span class="n">_DiffuseMap</span><span class="p">;</span>
		<span class="kt">float</span> <span class="n">_TextureScale</span><span class="p">;</span>
		<span class="kt">float</span> <span class="n">_TriplanarBlendSharpness</span><span class="p">;</span>

		<span class="k">struct</span> <span class="n">Input</span>
		<span class="p">{</span>
			<span class="n">float3</span> <span class="n">worldPos</span><span class="p">;</span>
			<span class="n">float3</span> <span class="n">worldNormal</span><span class="p">;</span>
		<span class="p">};</span> 

		<span class="kt">void</span> <span class="n">surf</span> <span class="p">(</span><span class="n">Input</span> <span class="n">IN</span><span class="p">,</span> <span class="k">inout</span> <span class="n">SurfaceOutput</span> <span class="n">o</span><span class="p">)</span> 
		<span class="p">{</span>

			<span class="n">half2</span> <span class="n">yUV</span> <span class="o">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">worldPos</span><span class="p">.</span><span class="n">xz</span> <span class="o">/</span> <span class="n">_TextureScale</span><span class="p">;</span>
			<span class="n">half2</span> <span class="n">xUV</span> <span class="o">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">worldPos</span><span class="p">.</span><span class="n">zy</span> <span class="o">/</span> <span class="n">_TextureScale</span><span class="p">;</span>
			<span class="n">half2</span> <span class="n">zUV</span> <span class="o">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">worldPos</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">_TextureScale</span><span class="p">;</span>

			<span class="n">half3</span> <span class="n">yDiff</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_DiffuseMap</span><span class="p">,</span> <span class="n">yUV</span><span class="p">);</span>
			<span class="n">half3</span> <span class="n">xDiff</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_DiffuseMap</span><span class="p">,</span> <span class="n">xUV</span><span class="p">);</span>
			<span class="n">half3</span> <span class="n">zDiff</span> <span class="o">=</span> <span class="n">tex2D</span> <span class="p">(</span><span class="n">_DiffuseMap</span><span class="p">,</span> <span class="n">zUV</span><span class="p">);</span>

			<span class="n">half3</span> <span class="n">blendWeights</span> <span class="o">=</span> <span class="n">pow</span> <span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">IN</span><span class="p">.</span><span class="n">worldNormal</span><span class="p">),</span> <span class="n">_TriplanarBlendSharpness</span><span class="p">);</span>

			<span class="n">blendWeights</span> <span class="o">=</span> <span class="n">blendWeights</span> <span class="o">/</span> <span class="p">(</span><span class="n">blendWeights</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blendWeights</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">blendWeights</span><span class="p">.</span><span class="n">z</span><span class="p">);</span>

			<span class="n">o</span><span class="p">.</span><span class="n">Albedo</span> <span class="o">=</span> <span class="n">xDiff</span> <span class="o">*</span> <span class="n">blendWeights</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">yDiff</span> <span class="o">*</span> <span class="n">blendWeights</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">zDiff</span> <span class="o">*</span> <span class="n">blendWeights</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">ENDCG</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="Shader"/><summary type="html"><![CDATA[前情提要]]></summary></entry><entry><title type="html">Outline Shader/ 2D图片描边</title><link href="https://jiehengdong.github.io/blog/2022/Shader-Outline/" rel="alternate" type="text/html" title="Outline Shader/ 2D图片描边"/><published>2022-05-02T14:42:53+00:00</published><updated>2022-05-02T14:42:53+00:00</updated><id>https://jiehengdong.github.io/blog/2022/Shader-Outline</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2022/Shader-Outline/"><![CDATA[<h2 id="前情提要">前情提要</h2> <p>之前公司业务上有成千上万的图片需要后期添加描边，让美术重新制作描边效果图片，工单太多啦不现实。随即使用Shader实现效果</p> <h2 id="边缘检测描边">边缘检测描边</h2> <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"UICustom/Outline"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span><span class="p">(</span><span class="s">"Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
        <span class="n">_lineWidth</span><span class="p">(</span><span class="s">"lineWidth"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">_lineColor</span><span class="p">(</span><span class="s">"lineColor"</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Transparent"</span> <span class="p">}</span>
        <span class="n">Blend</span> <span class="n">SrcAlpha</span> <span class="n">OneMinusSrcAlpha</span>

        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">HLSLPROGRAM</span>
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma fragment frag
</span>
            <span class="cp">#include</span>  <span class="cpf">"Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span><span class="cp">
</span>
            <span class="k">struct</span> <span class="n">VertexInput</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="k">struct</span> <span class="n">VertexOutput</span>
            <span class="p">{</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="n">VertexOutput</span> <span class="n">vert</span> <span class="p">(</span><span class="n">VertexInput</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">VertexOutput</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">vertex</span> <span class="o">=</span> <span class="n">TransformObjectToHClip</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
            <span class="n">float4</span> <span class="n">_MainTex_TexelSize</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_lineWidth</span><span class="p">;</span>
            <span class="n">float4</span> <span class="n">_lineColor</span><span class="p">;</span>

            <span class="n">float4</span> <span class="n">frag</span><span class="p">(</span><span class="n">VertexOutput</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span><span class="p">{</span>
                <span class="n">float4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>

                <span class="c1">// 采样周围四个点</span>
                <span class="n">float2</span> <span class="n">up</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_lineWidth</span> <span class="o">*</span> <span class="n">_MainTex_TexelSize</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">down</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">_lineWidth</span> <span class="o">*</span> <span class="n">_MainTex_TexelSize</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">left</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">_lineWidth</span> <span class="o">*</span> <span class="n">_MainTex_TexelSize</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">right</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">_lineWidth</span> <span class="o">*</span> <span class="n">_MainTex_TexelSize</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>

                <span class="c1">// 边缘检测思路 透明度为零就是边缘</span>
                <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">up</span><span class="p">).</span><span class="n">a</span> <span class="o">*</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">down</span><span class="p">).</span><span class="n">a</span> <span class="o">*</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">left</span><span class="p">).</span><span class="n">a</span> <span class="o">*</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">right</span><span class="p">).</span><span class="n">a</span><span class="p">;</span>

                <span class="n">col</span><span class="p">.</span><span class="n">rgb</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">_lineColor</span><span class="p">,</span> <span class="n">col</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">col</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDHLSL</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <blockquote> <p>边缘识别的算法也可以尝试用半圆范围识别，这里只是提供简单思路</p> </blockquote> <h2 id="新的问题">新的问题</h2> <p>由于UI图大量的透明通道清理不足，应该透明度为0的地方，有零星几个像素alpha值不统一(无法用alpha值小于约定值来实现，单纯是图片没有清理过)</p>]]></content><author><name></name></author><category term="Shader"/><summary type="html"><![CDATA[实现描边的一些坑]]></summary></entry><entry><title type="html">主程之路</title><link href="https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram/" rel="alternate" type="text/html" title="主程之路"/><published>2019-06-07T15:53:53+00:00</published><updated>2019-06-07T15:53:53+00:00</updated><id>https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram/"><![CDATA[<h2 id="目录">目录</h2> <ul> <li>Unity导出原生AAR嵌入原生 <a href="https://jiehengdong.github.io/blog/2024/Unity_Export_Android_ARR/">Pinterest</a></li> </ul>]]></content><author><name></name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[相关文章导航用]]></summary></entry></feed>