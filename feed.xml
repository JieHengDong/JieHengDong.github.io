<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jiehengdong.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jiehengdong.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-11T03:17:49+00:00</updated><id>https://jiehengdong.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Dissolve Shader</title><link href="https://jiehengdong.github.io/blog/2024/Shader-Dissolve/" rel="alternate" type="text/html" title="Dissolve Shader"/><published>2024-04-02T15:53:53+00:00</published><updated>2024-04-02T15:53:53+00:00</updated><id>https://jiehengdong.github.io/blog/2024/Shader-Dissolve</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/Shader-Dissolve/"><![CDATA[<h2 id="溶解效果">溶解效果</h2> <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Universal Render Pipeline/Wireframe/DisplacementFade"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span> <span class="p">(</span><span class="s">"Main Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{</span> <span class="p">}</span>
        <span class="n">_WireThickness</span> <span class="p">(</span><span class="s">"Wire Thickness"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">800</span><span class="p">))</span> <span class="o">=</span> <span class="mi">100</span>
        <span class="p">[</span><span class="n">HDR</span><span class="p">]</span> <span class="n">_WireColor</span> <span class="p">(</span><span class="s">"Wire Color"</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">INVERT</span><span class="p">)]</span> <span class="n">_INVERT</span><span class="p">(</span><span class="s">"Invert"</span><span class="p">,</span> <span class="n">Float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">_MovingSlider</span> <span class="p">(</span><span class="s">"Moving Slider"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">_Extrude</span><span class="p">(</span><span class="s">"Extrude Amount"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">_WireFrameStay</span> <span class="p">(</span><span class="s">"Wire Stay"</span><span class="p">,</span> <span class="n">RANGE</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span>
 
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span><span class="s">"RenderType"</span> <span class="o">=</span> <span class="s">"Opaque"</span> <span class="s">"RenderPipeline"</span> <span class="o">=</span> <span class="s">"UniversalPipeline"</span> <span class="p">}</span>
        <span class="n">LOD</span> <span class="mi">100</span>
 
        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="c1">// Wireframe shader based on the the following</span>
            <span class="c1">// http://developer.download.nvidia.com/SDK/10/direct3d/Source/SolidWireframe/Doc/SolidWireframe.pdf</span>
 
            <span class="n">HLSLPROGRAM</span>
            <span class="cp">#pragma require geometry
</span> 
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma geometry geom
</span>            <span class="cp">#pragma fragment frag
</span>            <span class="cp">#pragma shader_feature INVERT
</span>            <span class="c1">// -------------------------------------</span>
            <span class="c1">// Unity defined keywords</span>
            <span class="cp">#pragma multi_compile_instancing
</span> 
            <span class="cp">#include</span> <span class="cpf">"Packages/com.unity.render-pipelines.universal/Shaders/UnlitInput.hlsl"</span><span class="cp">
</span>        <span class="c1">//    #include "UnlitInput.hlsl"</span>
 
            <span class="kt">float</span> <span class="n">_WireThickness</span><span class="p">;</span>
            <span class="n">float4</span> <span class="n">_WireColor</span><span class="p">;</span>
            <span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_MovingSlider</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_Extrude</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_WireFrameStay</span><span class="p">;</span>
 
            <span class="k">struct</span> <span class="n">Attributes</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">positionOS</span>       <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float3</span> <span class="n">normal</span> <span class="o">:</span><span class="n">NORMAL</span><span class="p">;</span>
            <span class="p">};</span>
 
            <span class="k">struct</span> <span class="n">v2g</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">projectionSpaceVertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span><span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">:</span> <span class="n">TEXCOORD1</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_OUTPUT_STEREO</span>
            <span class="p">};</span>
 
            <span class="n">v2g</span> <span class="n">vert</span><span class="p">(</span><span class="n">Attributes</span> <span class="kr">input</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2g</span> <span class="kr">output</span> <span class="o">=</span> <span class="p">(</span><span class="n">v2g</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
 
                <span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="kr">input</span><span class="p">);</span>
                <span class="n">UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO</span><span class="p">(</span><span class="kr">output</span><span class="p">);</span>
 
                <span class="c1">// move over the mesh y axis using a slider</span>
                <span class="c1">// with option to invert</span>
                <span class="cp">#if INVERT
</span>                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">=</span> <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">_MovingSlider</span><span class="p">;</span>
                <span class="cp">#else
</span>                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span> <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">_MovingSlider</span><span class="p">;</span>
                <span class="cp">#endif
</span>                <span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">xyz</span> <span class="o">-=</span> <span class="n">saturate</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">movingPos</span><span class="p">)</span> <span class="o">*</span> <span class="kr">input</span><span class="p">.</span><span class="n">normal</span> <span class="o">*</span> <span class="n">_Extrude</span><span class="p">;</span>
                <span class="n">VertexPositionInputs</span> <span class="n">vertexInput</span> <span class="o">=</span> <span class="n">GetVertexPositionInputs</span><span class="p">(</span><span class="kr">input</span><span class="p">.</span><span class="n">positionOS</span><span class="p">.</span><span class="n">xyz</span><span class="p">);</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">vertexInput</span><span class="p">.</span><span class="n">positionCS</span><span class="p">;</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="kr">input</span><span class="p">.</span><span class="n">uv</span><span class="p">;</span>
                <span class="kr">output</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">movingPos</span><span class="p">;</span>
                <span class="k">return</span> <span class="kr">output</span><span class="p">;</span>
            <span class="p">}</span>
 
            <span class="k">struct</span> <span class="n">g2f</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">projectionSpaceVertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">dist</span> <span class="o">:</span> <span class="n">TEXCOORD1</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="kt">float</span> <span class="n">movingPos</span> <span class="o">:</span> <span class="n">TEXCOORD2</span><span class="p">;</span>
                <span class="n">UNITY_VERTEX_OUTPUT_STEREO</span>
            <span class="p">};</span>
 
            <span class="p">[</span><span class="n">maxvertexcount</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
            <span class="kt">void</span> <span class="n">geom</span><span class="p">(</span><span class="n">triangle</span> <span class="n">v2g</span> <span class="n">i</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="k">inout</span> <span class="n">TriangleStream</span><span class="o">&lt;</span><span class="n">g2f</span><span class="o">&gt;</span> <span class="n">triangleStream</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
 
                <span class="n">float2</span> <span class="n">p0</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
 
                <span class="n">float2</span> <span class="n">edge0</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p1</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">edge1</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">edge2</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">-</span> <span class="n">p0</span><span class="p">;</span>
 
                <span class="c1">// To find the distance to the opposite edge, we take the</span>
                <span class="c1">// formula for finding the area of a triangle Area = Base/2 * Height,</span>
                <span class="c1">// and solve for the Height = (Area * 2)/Base.</span>
                <span class="c1">// We can get the area of a triangle by taking its cross product</span>
                <span class="c1">// divided by 2.  However we can avoid dividing our area/base by 2</span>
                <span class="c1">// since our cross product will already be double our area.</span>
                <span class="kt">float</span> <span class="n">area</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">edge1</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">edge2</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">edge1</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">edge2</span><span class="p">.</span><span class="n">x</span><span class="p">);</span>
                <span class="kt">float</span> <span class="n">wireThickness</span> <span class="o">=</span> <span class="mi">800</span> <span class="o">-</span> <span class="n">_WireThickness</span><span class="p">;</span>
 
                <span class="n">g2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge0</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
 
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge1</span><span class="p">)),</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
 
                <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">projectionSpaceVertex</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">xyz</span> <span class="o">=</span> <span class="n">float3</span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">area</span> <span class="o">/</span> <span class="n">length</span><span class="p">(</span><span class="n">edge2</span><span class="p">)))</span> <span class="o">*</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span> <span class="o">*</span> <span class="n">wireThickness</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">dist</span><span class="p">.</span><span class="n">w</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">o</span><span class="p">.</span><span class="n">projectionSpaceVertex</span><span class="p">.</span><span class="n">w</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">uv</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">=</span> <span class="n">i</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">movingPos</span><span class="p">;</span>
                <span class="n">triangleStream</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">o</span><span class="p">);</span>
            <span class="p">}</span>
 
            <span class="n">half4</span> <span class="n">frag</span><span class="p">(</span><span class="n">g2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="kt">float</span> <span class="n">minDistanceToEdge</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">min</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="n">i</span><span class="p">.</span><span class="n">dist</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
                <span class="n">float4</span> <span class="n">mainTex</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">xy</span><span class="p">);</span>
 
                <span class="c1">// show texture where there is no wireframe</span>
                <span class="c1">// also fades the wireframe over the moving position</span>
                <span class="k">if</span><span class="p">(</span><span class="n">minDistanceToEdge</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">9</span><span class="o">*</span> <span class="mi">1</span><span class="o">-</span> <span class="n">saturate</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">-</span> <span class="n">_WireFrameStay</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="c1">// discard pixels where there is no wireframe earlier</span>
                    <span class="n">clip</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span> <span class="o">-</span> <span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">);</span>
                    <span class="k">return</span> <span class="n">mainTex</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="c1">// discard pixels over the moving position</span>
                <span class="n">clip</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">movingPos</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">_WireColor</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDHLSL</span>
        <span class="p">}</span>
    <span class="p">}</span>
 
    <span class="n">FallBack</span> <span class="s">"Hidden/Universal Render Pipeline/FallbackError"</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Shader"/><summary type="html"><![CDATA[溶解效果的记录]]></summary></entry><entry><title type="html">Unity导出原生AAR嵌入原生</title><link href="https://jiehengdong.github.io/blog/2024/Unity_Export_Android_ARR/" rel="alternate" type="text/html" title="Unity导出原生AAR嵌入原生"/><published>2024-04-01T10:14:00+00:00</published><updated>2024-04-01T10:14:00+00:00</updated><id>https://jiehengdong.github.io/blog/2024/Unity_Export_Android_ARR</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2024/Unity_Export_Android_ARR/"><![CDATA[<h2 id="unity原生接入">Unity原生接入</h2> <p>为了更好的适应跨平台的开发需求，需要Unity结合原生开发</p> <ul> <li>环境 Unity 2022.3.21f1f1</li> </ul> <h3 id="unity导出设置">Unity导出设置</h3> <p>切换当前平台到对应平台，这里用安卓平台举例</p> <p>切换当前平台到对应安卓平台，如果未安装安卓插件去 Unityhub/Installs/your Editor/Add moudles</p> <p>进入项目设置</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/Unity_Setting.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>具体目标平台根据项目需求选择，ScriptingBackend 选择IL2CPP</p> <p>使用Android studio 打开(软件安装等不赘述)</p> <h3 id="原生项目设置">原生项目设置</h3> <p>原生项目结构</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">launcher</span><span class="pi">:</span>
  <span class="na">manifest</span><span class="pi">:</span>
  <span class="na">res</span><span class="pi">:</span>
    <span class="na">mipmap</span><span class="pi">:</span>
    <span class="na">values</span><span class="pi">:</span>

<span class="na">unityLibrary</span><span class="pi">:</span>
  <span class="na">manifests</span><span class="pi">:</span>
  <span class="na">java</span><span class="pi">:</span>
</code></pre></div></div> <ul> <li>需要把launcher/res/minmap 拷贝到 unityLibrary/res 路径下</li> <li>需要把launcher/res/values/string.xml 拷贝到 unityLibrary/res 路径下</li> </ul> <p>注释掉入口代码</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;application</span> <span class="na">android:extractNativeLibs=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.splash-mode"</span> <span class="na">android:value=</span><span class="s">"0"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.splash-enable"</span> <span class="na">android:value=</span><span class="s">"True"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.launch-fullscreen"</span> <span class="na">android:value=</span><span class="s">"True"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"notch.config"</span> <span class="na">android:value=</span><span class="s">"portrait|landscape"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unity.auto-report-fully-drawn"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">"com.unity3d.player.UnityPlayerActivity"</span> <span class="na">android:theme=</span><span class="s">"@style/UnityThemeSelector"</span> <span class="na">android:screenOrientation=</span><span class="s">"fullUser"</span> <span class="na">android:launchMode=</span><span class="s">"singleTask"</span> <span class="na">android:configChanges=</span><span class="s">"mcc|mnc|locale|touchscreen|keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize|fontScale|layoutDirection|density"</span> <span class="na">android:resizeableActivity=</span><span class="s">"false"</span> <span class="na">android:hardwareAccelerated=</span><span class="s">"false"</span><span class="nt">&gt;</span>
<span class="c">&lt;!--      &lt;intent-filter&gt;--&gt;</span>
<span class="c">&lt;!--        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;--&gt;</span>
<span class="c">&lt;!--        &lt;action android:name="android.intent.action.MAIN" /&gt;--&gt;</span>
<span class="c">&lt;!--      &lt;/intent-filter&gt;--&gt;</span>
      <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"unityplayer.UnityActivity"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"notch_support"</span> <span class="na">android:value=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/activity&gt;</span>
</code></pre></div></div> <h3 id="gradle-导出">Gradle 导出</h3> <p>根据自己项目设置使用Gradle导出AAR包，提供给原生接入</p>]]></content><author><name></name></author><category term="Unity"/><category term="workflow"/><summary type="html"><![CDATA[与原生交互相关]]></summary></entry><entry><title type="html">主程之路</title><link href="https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram/" rel="alternate" type="text/html" title="主程之路"/><published>2019-06-07T15:53:53+00:00</published><updated>2019-06-07T15:53:53+00:00</updated><id>https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram</id><content type="html" xml:base="https://jiehengdong.github.io/blog/2019/Path_Of_MainProgram/"><![CDATA[<h2 id="目录">目录</h2> <ul> <li>Unity导出原生AAR嵌入原生 <a href="https://jiehengdong.github.io/blog/2024/Unity_Export_Android_ARR/">Pinterest</a></li> </ul>]]></content><author><name></name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[相关文章导航用]]></summary></entry></feed>